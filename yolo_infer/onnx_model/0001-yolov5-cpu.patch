diff --git a/models/yolo.py b/models/yolo.py
index ed21c06..f52f05c 100644
--- a/models/yolo.py
+++ b/models/yolo.py
@@ -54,29 +54,32 @@ class Detect(nn.Module):
         self.inplace = inplace  # use inplace ops (e.g. slice assignment)
 
     def forward(self, x):
-        z = []  # inference output
+        # z = []  # inference output
+        # for i in range(self.nl):
+        #     x[i] = self.m[i](x[i])  # conv
+        #     bs, _, ny, nx = x[i].shape  # x(bs,255,20,20) to x(bs,3,20,20,85)
+        #     x[i] = x[i].view(bs, self.na, self.no, ny, nx).permute(0, 1, 3, 4, 2).contiguous()
+
+        #     if not self.training:  # inference
+        #         if self.dynamic or self.grid[i].shape[2:4] != x[i].shape[2:4]:
+        #             self.grid[i], self.anchor_grid[i] = self._make_grid(nx, ny, i)
+
+        #         if isinstance(self, Segment):  # (boxes + masks)
+        #             xy, wh, conf, mask = x[i].split((2, 2, self.nc + 1, self.no - self.nc - 5), 4)
+        #             xy = (xy.sigmoid() * 2 + self.grid[i]) * self.stride[i]  # xy
+        #             wh = (wh.sigmoid() * 2) ** 2 * self.anchor_grid[i]  # wh
+        #             y = torch.cat((xy, wh, conf.sigmoid(), mask), 4)
+        #         else:  # Detect (boxes only)
+        #             xy, wh, conf = x[i].sigmoid().split((2, 2, self.nc + 1), 4)
+        #             xy = (xy * 2 + self.grid[i]) * self.stride[i]  # xy
+        #             wh = (wh * 2) ** 2 * self.anchor_grid[i]  # wh
+        #             y = torch.cat((xy, wh, conf), 4)
+        #         z.append(y.view(bs, self.na * nx * ny, self.no))
+
+        # return x if self.training else (torch.cat(z, 1),) if self.export else (torch.cat(z, 1), x)
         for i in range(self.nl):
-            x[i] = self.m[i](x[i])  # conv
-            bs, _, ny, nx = x[i].shape  # x(bs,255,20,20) to x(bs,3,20,20,85)
-            x[i] = x[i].view(bs, self.na, self.no, ny, nx).permute(0, 1, 3, 4, 2).contiguous()
-
-            if not self.training:  # inference
-                if self.dynamic or self.grid[i].shape[2:4] != x[i].shape[2:4]:
-                    self.grid[i], self.anchor_grid[i] = self._make_grid(nx, ny, i)
-
-                if isinstance(self, Segment):  # (boxes + masks)
-                    xy, wh, conf, mask = x[i].split((2, 2, self.nc + 1, self.no - self.nc - 5), 4)
-                    xy = (xy.sigmoid() * 2 + self.grid[i]) * self.stride[i]  # xy
-                    wh = (wh.sigmoid() * 2) ** 2 * self.anchor_grid[i]  # wh
-                    y = torch.cat((xy, wh, conf.sigmoid(), mask), 4)
-                else:  # Detect (boxes only)
-                    xy, wh, conf = x[i].sigmoid().split((2, 2, self.nc + 1), 4)
-                    xy = (xy * 2 + self.grid[i]) * self.stride[i]  # xy
-                    wh = (wh * 2) ** 2 * self.anchor_grid[i]  # wh
-                    y = torch.cat((xy, wh, conf), 4)
-                z.append(y.view(bs, self.na * nx * ny, self.no))
-
-        return x if self.training else (torch.cat(z, 1),) if self.export else (torch.cat(z, 1), x)
+            x[i] = self.m[i](x[i])
+        return x[0], x[1], x[2]
 
     def _make_grid(self, nx=20, ny=20, i=0, torch_1_10=check_version(torch.__version__, '1.10.0')):
         d = self.anchors[i].device

Subject: [PATCH] yolov9 rpn

---
 models/yolo.py   | 19 ++++++++++++++++---
 rpn_op/filter.py | 44 ++++++++++++++++++++++++++++++++++++++++++++
 rpn_op/sort.py   | 42 ++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 102 insertions(+), 3 deletions(-)
 create mode 100644 rpn_op/filter.py
 create mode 100644 rpn_op/sort.py

diff --git a/models/yolo.py b/models/yolo.py
index a28c7d3..a068d32 100644
--- a/models/yolo.py
+++ b/models/yolo.py
@@ -110,9 +110,22 @@ class DDetect(nn.Module):
             self.shape = shape
 
         box, cls = torch.cat([xi.view(shape[0], self.no, -1) for xi in x], 2).split((self.reg_max * 4, self.nc), 1)
-        dbox = dist2bbox(self.dfl(box), self.anchors.unsqueeze(0), xywh=True, dim=1) * self.strides
-        y = torch.cat((dbox, cls.sigmoid()), 1)
-        return y if self.export else (y, x)
+        #dbox = dist2bbox(self.dfl(box), self.anchors.unsqueeze(0), xywh=True, dim=1) * self.strides
+        #y = torch.cat((dbox, cls.sigmoid()), 1)
+        #return y if self.export else (y, x)
+        dbox = dist2bbox(self.dfl(box), self.anchors.unsqueeze(0), xywh=False, dim=1) * self.strides
+        dbox = dbox.view(1, 1, 4, -1)
+        cls = cls.view(1, 1, self.nc, -1)
+        max_score, max_class_id = cls.max(2, keepdim=True)
+        max_score = max_score.sigmoid()
+        max_score_copy = max_score.clone()
+        from rpn_op.filter import FilterVector
+        from rpn_op.sort import SortVector
+        self.filter_val = FilterVector(300, 0.8, 0, 1)
+        self.filter_idx = FilterVector(300, 0.8, 1, 0)
+        filter_result0 = self.filter_val(max_score)
+        filter_result1 = self.filter_idx(max_score_copy)
+        return filter_result0,filter_result1,dbox,max_class_id
 
     def bias_init(self):
         # Initialize Detect() biases, WARNING: requires stride availability
diff --git a/rpn_op/filter.py b/rpn_op/filter.py
new file mode 100644
index 0000000..4c26fa2
--- /dev/null
+++ b/rpn_op/filter.py
@@ -0,0 +1,44 @@
+import unittest
+import torch
+import torch.utils.cpp_extension
+
+import onnx
+
+import numpy as np
+import io
+from torch.onnx.symbolic_helper import parse_args
+from torch.onnx import register_custom_op_symbolic
+
+op_source = """
+        #include <torch/script.h>
+        torch::Tensor FilterVector(torch::Tensor in, int64_t topK, double filterThresh, int64_t isOutputIdx, int64_t isReportVectorNum)
+        {
+            return in;
+        }
+        static auto registry =
+            torch::RegisterOperators("custom_ops::FilterVector", &FilterVector);
+        """
+
+torch.utils.cpp_extension.load_inline(
+    name='FilterVector',
+    cpp_sources=op_source,
+    is_python_module=False,
+    verbose=True,
+    )
+
+@parse_args("v", "i", "f", "i", "i")
+def symbolic_filter(g, self, top_k, filter_thresh, is_output_idx, is_report_vector_num):
+    return g.op('custom_ops::FilterVector', self, top_k_i=top_k, filter_thresh_f=filter_thresh,
+        is_output_idx_i=is_output_idx, is_report_vector_num_i=is_report_vector_num)
+from torch.onnx import register_custom_op_symbolic
+register_custom_op_symbolic('custom_ops::FilterVector', symbolic_filter, 9)
+
+class FilterVector(torch.nn.Module):
+    def __init__(self, top_k, filter_thresh, is_output_idx, is_report_vector_num):
+        super(FilterVector, self).__init__()
+        self.top_k = top_k
+        self.filter_thresh = filter_thresh
+        self.is_output_idx = is_output_idx
+        self.is_report_vector_num = is_report_vector_num
+    def forward(self, x):
+        return torch.ops.custom_ops.FilterVector(x, self.top_k, self.filter_thresh, self.is_output_idx, self.is_report_vector_num)
\ No newline at end of file
diff --git a/rpn_op/sort.py b/rpn_op/sort.py
new file mode 100644
index 0000000..55a9c95
--- /dev/null
+++ b/rpn_op/sort.py
@@ -0,0 +1,42 @@
+import unittest
+import torch
+import torch.utils.cpp_extension
+
+import onnx
+
+import numpy as np
+import io
+from torch.onnx.symbolic_helper import parse_args
+from torch.onnx import register_custom_op_symbolic
+
+op_source = """
+        #include <torch/script.h>
+        torch::Tensor SortVector(torch::Tensor in, int64_t topK, int64_t isOutputIdx, int64_t isReportVectorNum)
+        {
+            return in;
+        }
+        static auto registry =
+            torch::RegisterOperators("custom_ops::SortVector", &SortVector);
+        """
+
+torch.utils.cpp_extension.load_inline(
+    name='SortVector',
+    cpp_sources=op_source,
+    is_python_module=False,
+    verbose=True,
+    )
+
+@parse_args("v", "i", "i", "i")
+def symbolic_filter(g, self, top_k, is_output_idx, is_report_vector_num):
+    return g.op('custom_ops::SortVector', self, top_k_i=top_k, is_output_idx_i=is_output_idx, is_report_vector_num_i=is_report_vector_num)
+from torch.onnx import register_custom_op_symbolic
+register_custom_op_symbolic('custom_ops::SortVector', symbolic_filter, 9)
+
+class SortVector(torch.nn.Module):
+    def __init__(self, top_k, is_output_idx, is_report_vector_num):
+        super(FilterVector, self).__init__()
+        self.top_k = top_k
+        self.is_output_idx = is_output_idx
+        self.is_report_vector_num = is_report_vector_num
+    def forward(self, x):
+        return torch.ops.custom_ops.SortVector(x, self.top_k, self.is_output_idx, self.is_report_vector_num)
\ No newline at end of file
-- 
2.34.1

